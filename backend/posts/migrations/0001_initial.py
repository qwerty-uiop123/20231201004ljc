# Generated by Django 5.2.7 on 2025-10-29 04:03

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('tiebas', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='帖子标题')),
                ('content', models.TextField(verbose_name='帖子内容')),
                ('type', models.CharField(choices=[('normal', '普通帖'), ('question', '提问帖'), ('discussion', '讨论帖'), ('share', '分享帖'), ('announcement', '公告帖')], default='normal', max_length=20, verbose_name='帖子类型')),
                ('status', models.CharField(choices=[('draft', '草稿'), ('published', '已发布'), ('pending', '待审核'), ('rejected', '已拒绝'), ('deleted', '已删除')], default='published', max_length=20, verbose_name='帖子状态')),
                ('view_count', models.IntegerField(default=0, verbose_name='浏览数')),
                ('reply_count', models.IntegerField(default=0, verbose_name='回复数')),
                ('like_count', models.IntegerField(default=0, verbose_name='点赞数')),
                ('favorite_count', models.IntegerField(default=0, verbose_name='收藏数')),
                ('is_pinned', models.BooleanField(default=False, verbose_name='是否置顶')),
                ('is_essence', models.BooleanField(default=False, verbose_name='是否精华')),
                ('is_anonymous', models.BooleanField(default=False, verbose_name='是否匿名')),
                ('allow_reply', models.BooleanField(default=True, verbose_name='允许回复')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='发布时间')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL, verbose_name='作者')),
                ('tieba', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='tiebas.tieba', verbose_name='所属贴吧')),
            ],
            options={
                'verbose_name': '帖子',
                'verbose_name_plural': '帖子',
                'ordering': ['-is_pinned', '-published_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostFavorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='收藏时间')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to='posts.post', verbose_name='帖子')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_favorites', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '帖子收藏',
                'verbose_name_plural': '帖子收藏',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='post_images/', verbose_name='图片')),
                ('caption', models.CharField(blank=True, max_length=200, verbose_name='图片说明')),
                ('sort_order', models.IntegerField(default=0, verbose_name='排序')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='posts.post', verbose_name='帖子')),
            ],
            options={
                'verbose_name': '帖子图片',
                'verbose_name_plural': '帖子图片',
                'ordering': ['sort_order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='点赞时间')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='posts.post', verbose_name='帖子')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_likes', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '帖子点赞',
                'verbose_name_plural': '帖子点赞',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostViewHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP地址')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='浏览时间')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='view_history', to='posts.post', verbose_name='帖子')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_view_history', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '帖子浏览历史',
                'verbose_name_plural': '帖子浏览历史',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Reply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='回复内容')),
                ('status', models.CharField(choices=[('published', '已发布'), ('pending', '待审核'), ('deleted', '已删除')], default='published', max_length=20, verbose_name='回复状态')),
                ('floor', models.IntegerField(default=0, verbose_name='楼层')),
                ('like_count', models.IntegerField(default=0, verbose_name='点赞数')),
                ('is_anonymous', models.BooleanField(default=False, verbose_name='是否匿名')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replies', to=settings.AUTH_USER_MODEL, verbose_name='作者')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='posts.reply', verbose_name='父回复')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='posts.post', verbose_name='帖子')),
            ],
            options={
                'verbose_name': '回复',
                'verbose_name_plural': '回复',
                'ordering': ['floor', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReplyImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='reply_images/', verbose_name='图片')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('reply', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='posts.reply', verbose_name='回复')),
            ],
            options={
                'verbose_name': '回复图片',
                'verbose_name_plural': '回复图片',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReplyLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='点赞时间')),
                ('reply', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='posts.reply', verbose_name='回复')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reply_likes', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '回复点赞',
                'verbose_name_plural': '回复点赞',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['tieba', 'status', 'created_at'], name='posts_post_tieba_i_842b3f_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['author', 'status', 'created_at'], name='posts_post_author__3ffbb0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='postfavorite',
            unique_together={('post', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='postlike',
            unique_together={('post', 'user')},
        ),
        migrations.AddIndex(
            model_name='reply',
            index=models.Index(fields=['post', 'status', 'created_at'], name='posts_reply_post_id_f8ad03_idx'),
        ),
        migrations.AddIndex(
            model_name='reply',
            index=models.Index(fields=['author', 'status', 'created_at'], name='posts_reply_author__c89b04_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='replylike',
            unique_together={('reply', 'user')},
        ),
    ]
